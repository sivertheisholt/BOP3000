// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220311160518_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Entities.Applications.Discord", b =>
                {
                    b.Property<int>("AppUserConnectionsId")
                        .HasColumnType("int");

                    b.HasKey("AppUserConnectionsId");

                    b.ToTable("Discord");
                });

            modelBuilder.Entity("API.Entities.Applications.Steam", b =>
                {
                    b.Property<int>("AppUserConnectionsId")
                        .HasColumnType("int");

                    b.HasKey("AppUserConnectionsId");

                    b.ToTable("Steam");
                });

            modelBuilder.Entity("API.Entities.Countries.CountryIso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumericCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThreeLetterCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoLetterCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountryIso");
                });

            modelBuilder.Entity("API.Entities.Lobbies.Lobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdminUid")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("GameType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LobbyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LobbyRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Users")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LobbyRequirementId");

                    b.ToTable("Lobby");
                });

            modelBuilder.Entity("API.Entities.Lobbies.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requirement");
                });

            modelBuilder.Entity("API.Entities.Roles.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.SteamApp.AppInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AppInfo");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Achievements", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("AppDataId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.AppData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutTheGame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Developers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dlc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("LegalNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publishers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredAge")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SteamAppid")
                        .HasColumnType("int");

                    b.Property<string>("SupportedLanguages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppInfoId")
                        .IsUnique();

                    b.ToTable("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "AppDataId");

                    b.HasIndex("AppDataId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.ContentDescriptors", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Ids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("ContentDescriptors");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.HasIndex("AppDataId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Highlighted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AchievementsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AchievementsId");

                    b.ToTable("Highlighted");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.LinuxRequirements", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Minimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("LinuxRequirements");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.MacRequirements", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Minimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("MacRequirements");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Metacritic", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("Metacritic");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Movy", b =>
                {
                    b.Property<int>("MovyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovyId"), 1L, 1);

                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<bool>("Highlight")
                        .HasColumnType("bit");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovyId");

                    b.HasIndex("Id");

                    b.ToTable("Movy");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Mp4", b =>
                {
                    b.Property<int>("MovyId")
                        .HasColumnType("int");

                    b.Property<string>("Max")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution480")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovyId");

                    b.ToTable("Mp4");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.PackageGroup", b =>
                {
                    b.Property<int>("PackageGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageGroupId"), 1L, 1);

                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayType")
                        .HasColumnType("int");

                    b.Property<string>("IsRecurringSubscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaveText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PackageGroupId");

                    b.HasIndex("AppDataId");

                    b.ToTable("PackageGroup");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.PcRequirements", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Minimum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("PcRequirements");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Platforms", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<bool>("Linux")
                        .HasColumnType("bit");

                    b.Property<bool>("Mac")
                        .HasColumnType("bit");

                    b.Property<bool>("Windows")
                        .HasColumnType("bit");

                    b.HasKey("AppDataId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Price", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<int>("Final")
                        .HasColumnType("int");

                    b.Property<string>("FinalFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Initial")
                        .HasColumnType("int");

                    b.Property<string>("InitialFormatted")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Recommendations", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.HasKey("AppDataId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.ReleaseDate", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<bool>("ComingSoon")
                        .HasColumnType("bit");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("ReleaseDate");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Screenshot", b =>
                {
                    b.Property<int>("ScreenshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreenshotId"), 1L, 1);

                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PathFull")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathThumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScreenshotId");

                    b.HasIndex("AppDataId");

                    b.ToTable("Screenshot");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Sub", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"), 1L, 1);

                    b.Property<string>("CanGetFreeLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFreeLicense")
                        .HasColumnType("bit");

                    b.Property<string>("OptionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("PercentSavings")
                        .HasColumnType("int");

                    b.Property<string>("PercentSavingsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceInCentsWithDiscount")
                        .HasColumnType("int");

                    b.HasKey("SubId");

                    b.HasIndex("PackageGroupId");

                    b.ToTable("Sub");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.SupportInfo", b =>
                {
                    b.Property<int>("AppDataId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppDataId");

                    b.ToTable("SupportInfo");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Webm", b =>
                {
                    b.Property<int>("MovyId")
                        .HasColumnType("int");

                    b.Property<string>("Max")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution480")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovyId");

                    b.ToTable("Webm");
                });

            modelBuilder.Entity("API.Entities.SteamApps.AppList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AppList");
                });

            modelBuilder.Entity("API.Entities.SteamApps.AppListInfo", b =>
                {
                    b.Property<int>("AppListInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppListInfoId"), 1L, 1);

                    b.Property<int>("AppId")
                        .HasColumnType("int");

                    b.Property<int>("AppListId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppListInfoId");

                    b.HasIndex("AppListId");

                    b.ToTable("AppListInfo");
                });

            modelBuilder.Entity("API.Entities.Users.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.Users.AppUserConnections", b =>
                {
                    b.Property<int>("AppUserProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("DiscordConnected")
                        .HasColumnType("bit");

                    b.Property<bool>("SteamConnected")
                        .HasColumnType("bit");

                    b.HasKey("AppUserProfileId");

                    b.ToTable("AppUserConnections");
                });

            modelBuilder.Entity("API.Entities.Users.AppUserData", b =>
                {
                    b.Property<int>("AppUserProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Downvotes")
                        .HasColumnType("int");

                    b.Property<string>("Followers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Following")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Upvotes")
                        .HasColumnType("int");

                    b.Property<string>("UserFavoriteGames")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserProfileId");

                    b.ToTable("AppUserData");
                });

            modelBuilder.Entity("API.Entities.Users.AppUserProfile", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CountryIsoId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinishedLobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserId");

                    b.HasIndex("CountryIsoId");

                    b.ToTable("AppUserProfile");
                });

            modelBuilder.Entity("API.Entities.Users.Role.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.Applications.Discord", b =>
                {
                    b.HasOne("API.Entities.Users.AppUserConnections", "AppUserConnections")
                        .WithOne("Discord")
                        .HasForeignKey("API.Entities.Applications.Discord", "AppUserConnectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserConnections");
                });

            modelBuilder.Entity("API.Entities.Applications.Steam", b =>
                {
                    b.HasOne("API.Entities.Users.AppUserConnections", "AppUserConnections")
                        .WithOne("Steam")
                        .HasForeignKey("API.Entities.Applications.Steam", "AppUserConnectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserConnections");
                });

            modelBuilder.Entity("API.Entities.Lobbies.Lobby", b =>
                {
                    b.HasOne("API.Entities.Lobbies.Requirement", "LobbyRequirement")
                        .WithMany()
                        .HasForeignKey("LobbyRequirementId");

                    b.Navigation("LobbyRequirement");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Achievements", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("Achievements")
                        .HasForeignKey("API.Entities.SteamApp.Information.Achievements", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.AppData", b =>
                {
                    b.HasOne("API.Entities.SteamApp.AppInfo", "AppInfo")
                        .WithOne("Data")
                        .HasForeignKey("API.Entities.SteamApp.Information.AppData", "AppInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppInfo");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Category", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithMany("Categories")
                        .HasForeignKey("AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.ContentDescriptors", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("ContentDescriptors")
                        .HasForeignKey("API.Entities.SteamApp.Information.ContentDescriptors", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Genre", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithMany("Genres")
                        .HasForeignKey("AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Highlighted", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.Achievements", "Achievements")
                        .WithMany("Highlighted")
                        .HasForeignKey("AchievementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.LinuxRequirements", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("LinuxRequirements")
                        .HasForeignKey("API.Entities.SteamApp.Information.LinuxRequirements", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.MacRequirements", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("MacRequirements")
                        .HasForeignKey("API.Entities.SteamApp.Information.MacRequirements", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Metacritic", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("Metacritic")
                        .HasForeignKey("API.Entities.SteamApp.Information.Metacritic", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Movy", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithMany("Movies")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Mp4", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.Movy", "Movy")
                        .WithOne("Mp4")
                        .HasForeignKey("API.Entities.SteamApp.Information.Mp4", "MovyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movy");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.PackageGroup", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithMany("PackageGroups")
                        .HasForeignKey("AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.PcRequirements", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("PcRequirements")
                        .HasForeignKey("API.Entities.SteamApp.Information.PcRequirements", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Platforms", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("Platforms")
                        .HasForeignKey("API.Entities.SteamApp.Information.Platforms", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Price", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("PriceOverview")
                        .HasForeignKey("API.Entities.SteamApp.Information.Price", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Recommendations", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("Recommendations")
                        .HasForeignKey("API.Entities.SteamApp.Information.Recommendations", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.ReleaseDate", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("ReleaseDate")
                        .HasForeignKey("API.Entities.SteamApp.Information.ReleaseDate", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Screenshot", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithMany("Screenshots")
                        .HasForeignKey("AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Sub", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.PackageGroup", "PackageGroup")
                        .WithMany("Subs")
                        .HasForeignKey("PackageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageGroup");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.SupportInfo", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.AppData", "AppData")
                        .WithOne("SupportInfo")
                        .HasForeignKey("API.Entities.SteamApp.Information.SupportInfo", "AppDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppData");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Webm", b =>
                {
                    b.HasOne("API.Entities.SteamApp.Information.Movy", "Movy")
                        .WithOne("Webm")
                        .HasForeignKey("API.Entities.SteamApp.Information.Webm", "MovyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movy");
                });

            modelBuilder.Entity("API.Entities.SteamApps.AppListInfo", b =>
                {
                    b.HasOne("API.Entities.SteamApps.AppList", "AppList")
                        .WithMany("Apps")
                        .HasForeignKey("AppListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppList");
                });

            modelBuilder.Entity("API.Entities.Users.AppUserConnections", b =>
                {
                    b.HasOne("API.Entities.Users.AppUserProfile", "AppUserProfile")
                        .WithOne("UserConnections")
                        .HasForeignKey("API.Entities.Users.AppUserConnections", "AppUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserProfile");
                });

            modelBuilder.Entity("API.Entities.Users.AppUserData", b =>
                {
                    b.HasOne("API.Entities.Users.AppUserProfile", "AppUserProfile")
                        .WithOne("AppUserData")
                        .HasForeignKey("API.Entities.Users.AppUserData", "AppUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserProfile");
                });

            modelBuilder.Entity("API.Entities.Users.AppUserProfile", b =>
                {
                    b.HasOne("API.Entities.Users.AppUser", "AppUser")
                        .WithOne("AppUserProfile")
                        .HasForeignKey("API.Entities.Users.AppUserProfile", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Countries.CountryIso", "CountryIso")
                        .WithMany()
                        .HasForeignKey("CountryIsoId");

                    b.Navigation("AppUser");

                    b.Navigation("CountryIso");
                });

            modelBuilder.Entity("API.Entities.Users.Role.AppUserRole", b =>
                {
                    b.HasOne("API.Entities.Roles.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Users.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("API.Entities.Roles.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("API.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("API.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("API.Entities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Roles.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.SteamApp.AppInfo", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Achievements", b =>
                {
                    b.Navigation("Highlighted");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.AppData", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Categories");

                    b.Navigation("ContentDescriptors");

                    b.Navigation("Genres");

                    b.Navigation("LinuxRequirements");

                    b.Navigation("MacRequirements");

                    b.Navigation("Metacritic");

                    b.Navigation("Movies");

                    b.Navigation("PackageGroups");

                    b.Navigation("PcRequirements");

                    b.Navigation("Platforms");

                    b.Navigation("PriceOverview");

                    b.Navigation("Recommendations");

                    b.Navigation("ReleaseDate");

                    b.Navigation("Screenshots");

                    b.Navigation("SupportInfo");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.Movy", b =>
                {
                    b.Navigation("Mp4");

                    b.Navigation("Webm");
                });

            modelBuilder.Entity("API.Entities.SteamApp.Information.PackageGroup", b =>
                {
                    b.Navigation("Subs");
                });

            modelBuilder.Entity("API.Entities.SteamApps.AppList", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("API.Entities.Users.AppUser", b =>
                {
                    b.Navigation("AppUserProfile");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.Users.AppUserConnections", b =>
                {
                    b.Navigation("Discord");

                    b.Navigation("Steam");
                });

            modelBuilder.Entity("API.Entities.Users.AppUserProfile", b =>
                {
                    b.Navigation("AppUserData");

                    b.Navigation("UserConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
